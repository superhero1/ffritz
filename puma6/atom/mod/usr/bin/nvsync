#!/bin/sh
#
# Synchronize passwords, keys etc. from atom to "nvram"
# The storage is encrypted with a random password. This password is 
# also stored in nvram, but it is encrypted with the box ssh key, which
# in turn is password protected.
#

export FFINSTDIR=/usr/local
export FFRITZ_HOME=/var/media/ftp/ffritz
export FFLOG=/var/log/ffritz.log

DATADIR=$FFRITZ_HOME/data

NVRAM_FILE=$DATADIR/ffstore.dat
BINFILE=$DATADIR/ffimage.bin
PRIVKEY=/var/flash/websrv_ssl_key.pem

NVRAM_COPY=/var/tmp/ffnvram

KEY_ENC=$DATADIR/key.enc
KEY_PLAIN=/tmp/key.bin

if [ ! -d $NVRAM_COPY ]; then
	echo 'No NVRAM copy to store ($NVRAM_COPY)' 1>&2
	exit 1
fi

mkdir -p $DATADIR
chmod 700 $DATADIR

# Check if the encrypted key to the storage is present.
# - If not, create it (using the box private key), leave the plain key for later
# - Otherwise, decrypt it (using the box private key)
#
if [ ! -r $KEY_ENC ]; then
	openssl rand -base64 32 > $KEY_PLAIN || exit 1
	privatekeypassword | openssl rsautl -passin stdin -encrypt -inkey $PRIVKEY -in $KEY_PLAIN -out $KEY_ENC || exit 1
else
	privatekeypassword | openssl rsautl -passin stdin -decrypt -inkey $PRIVKEY -in $KEY_ENC -out $KEY_PLAIN || exit 1
fi

## Pack RAM copy into tar file
cd $NVRAM_COPY
tar cf /tmp/ffstore.tar . 

## encrypt it 
## Note that this makes explicit use of md5 algorithm, although deprecated with openssl 1.1.0
## Changing this would break backwards compatibility .. so i keep it for now.
## rc script already can handle both
#
# New:
# openssl enc -pass file:$KEY_PLAIN -salt -aes-256-cbc -pbkdf2 -iter 1000  -in /tmp/ffstore.tar  -out /tmp/ffstore.dat
#
# Old:
#
openssl enc -md md5 -pass file:$KEY_PLAIN -salt -aes-256-cbc -in /tmp/ffstore.tar  -out /tmp/ffstore.dat >/dev/null 2>&1

rc=$?
rm -f /tmp/ffstore.tar
rm -f $KEY_PLAIN

if [ $rc -ne 0 ]; then
	echo +++ FAILED
	exit 1
fi

## move it to persistent storage, overwriting old data file
chmod 700 /tmp/ffstore.dat
mv /tmp/ffstore.dat $NVRAM_FILE || exit 1

echo +++ Success
