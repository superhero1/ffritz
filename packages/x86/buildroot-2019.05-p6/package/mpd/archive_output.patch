--- build/src/output/plugins/RecorderOutputPlugin.cxx	2017-06-04 12:38:35.000000000 +0200
+++ build.n/src/output/plugins/RecorderOutputPlugin.cxx	2019-02-16 20:32:34.629473000 +0100
@@ -34,6 +34,10 @@
 #include "util/RuntimeError.hxx"
 #include "util/Domain.hxx"
 #include "util/ScopeExit.hxx"
+#include "output/OutputState.hxx"
+#include "Partition.hxx"
+#include "Instance.hxx"
+#include "Main.hxx"
 
 #include <stdexcept>
 
@@ -58,6 +62,8 @@
 	 */
 	AllocatedPath path = AllocatedPath::Null();
 
+	AllocatedPath archive_path = AllocatedPath::Null();
+
 	/**
 	 * A string that will be used with FormatTag() to build the
 	 * destination path.
@@ -95,6 +101,7 @@
 
 	size_t Play(const void *chunk, size_t size);
 
+	void archiveCurrent();
 private:
 	gcc_pure
 	bool HasDynamicPath() const noexcept {
@@ -110,12 +117,36 @@
 
 	void FinishFormat();
 	void ReopenFormat(AllocatedPath &&new_path);
+
+	/* parent (true) recorder to send archive message to */
+	AudioOutput *rp;
+	RecorderOutput *parent;
+	int is_archive_recorder = 0;
+	int archive_requested = 0;
+	int can_archive = 0;
+	int delete_after_record = 0;
+	std::string archive_format_path;
 };
 
 RecorderOutput::RecorderOutput(const ConfigBlock &block)
 	:base(recorder_output_plugin, block)
 {
 	/* read configuration */
+	const char *parentName = block.GetBlockValue("parent", nullptr);
+	if (parentName != nullptr)
+	{
+		is_archive_recorder = 1;
+
+		rp = instance->partition->outputs.FindByName (parentName);
+		parent = (RecorderOutput*)rp;
+
+		if (rp)
+			FormatDebug(recorder_domain, "found parent");
+		else
+			throw FormatRuntimeError("No such output: %s", parentName);
+
+		return;
+	}
 
 	const char *encoder_name =
 		block.GetBlockValue("encoder", "vorbis");
@@ -135,9 +166,18 @@
 	if (!path.IsNull() && fmt != nullptr)
 		throw std::runtime_error("Cannot have both 'path' and 'format_path'");
 
+	const char *archive_fmt = block.GetBlockValue("archive_path", nullptr);
+	if (archive_fmt != nullptr) {
+		archive_format_path = archive_fmt;
+	}
+
+	if (block.GetBlockValue("delete_after_record", nullptr))
+		delete_after_record = 1;
+
 	/* initialize encoder */
 
 	prepared_encoder = encoder_init(*encoder_plugin, block);
+
 }
 
 RecorderOutput *
@@ -157,6 +197,16 @@
 inline void
 RecorderOutput::Open(AudioFormat &audio_format)
 {
+	if (is_archive_recorder) {
+		FormatDebug(recorder_domain, "Sending Archive Message");
+
+		parent->archiveCurrent();
+
+		// XXX TODO disable this output immedeately here
+
+		return;
+	}
+
 	/* create the output file */
 
 	if (!HasDynamicPath()) {
@@ -202,6 +252,9 @@
 {
 	assert(!path.IsNull());
 
+	if (is_archive_recorder)
+		return;
+
 	/* flush the encoder and write the rest to the file */
 
 	try {
@@ -212,6 +265,8 @@
 		throw;
 	}
 
+
+
 	/* now really close everything */
 
 	delete encoder;
@@ -223,6 +278,36 @@
 		throw;
 	}
 
+	/* move file to archive if requested */
+	if (archive_requested && can_archive) {
+		std::string cmd;
+
+		if (delete_after_record)
+			cmd = "mv -- '";
+		else
+			cmd = "cp -- '";
+
+		cmd += path.c_str();
+		cmd += "' '";
+		cmd += archive_path.c_str();
+		cmd += "'&";
+
+		FormatDebug(recorder_domain, "Archiving: \"%s\"", cmd.c_str());
+
+		system (cmd.c_str());
+
+		archive_requested = 0;
+	}
+	else
+	{
+	    /* delete file if requested */
+	    if (delete_after_record) {
+		    FormatDebug(recorder_domain, "Deleting \"%s\"", path.c_str());
+		    
+		    unlink(path.c_str());
+	    }
+	}
+
 	delete file;
 }
 
@@ -304,11 +389,22 @@
 		    path.ToUTF8().c_str());
 }
 
+inline void RecorderOutput::archiveCurrent()
+{
+	archive_requested = 1;
+}
+
 inline void
 RecorderOutput::SendTag(const Tag &tag)
 {
+	if (is_archive_recorder)
+		return;
+
 	if (HasDynamicPath()) {
-		char *p = FormatTag(tag, format_path.c_str());
+		char *p;
+		char *ap = NULL;
+
+		p  = FormatTag(tag, format_path.c_str());
 		if (p == nullptr || *p == 0) {
 			/* no path could be composed with this tag:
 			   don't write a file */
@@ -339,6 +435,20 @@
 				return;
 			}
 		}
+
+		can_archive = 0;
+
+		if (!archive_format_path.empty()) {
+			ap = FormatTag(tag, archive_format_path.c_str());
+			AtScopeExit(ap) { free(ap); };
+
+			try {
+				archive_path = ParsePath(ap);
+				can_archive = 1;
+			} catch (const std::runtime_error &e) {
+				LogError(e);
+			}
+		}
 	}
 
 	encoder->PreTag();
@@ -349,6 +459,9 @@
 inline size_t
 RecorderOutput::Play(const void *chunk, size_t size)
 {
+	if (is_archive_recorder)
+		return size;
+
 	if (file == nullptr) {
 		/* not currently encoding to a file; discard incoming
 		   data */
